from datacenter.models import Dish, User
import random
import dotenv
import os
import telebot
from telebot import types


def add_new_user(message):
    chat_id = message.from_user.id
    if not User.objects.filter(chat_id=chat_id).exists():
        username = str(message.from_user.username)
        new_user = User(chat_id=chat_id, user_name=username)
        new_user.save()


def set_user_price(chat_id, price):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        user = User.objects.get(chat_id=str(chat_id))
        user.price = price
        user.save()
        return True
    except User.DoesNotExist:
        return False


def get_budget(message):
    chat_id = message.chat.id
    user = User.objects.get(chat_id=chat_id)
    return user.price


def toggle_user_preference(chat_id, preference_type):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (str)
        preference_type: —Ç–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ('gluten_free', 'vegan', 'eco')
    Returns:
        new_value: –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (True/False) –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
    user = User.objects.get(chat_id=str(chat_id))

    # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
    current_value = getattr(user, preference_type)
    new_value = not current_value
    setattr(user, preference_type, new_value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user.save()

    return new_value


def get_dish(chat_id):
    user = User.objects.get(chat_id=chat_id)
    filtered_dishes = Dish.objects.filter(
        gluten_free=user.gluten_free,
        vegan=user.vegan,
        eco=user.eco,
        price__lte=user.price,
    )
    return random.choice(filtered_dishes)


def run():
    dotenv.load_dotenv()
    token = os.getenv("TG_BOT")

    bot = telebot.TeleBot(token)
    welcome_message = "üçΩÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodPlan!\n–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è ‚Äî –≤–∫—É—Å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∏ —Å –ø–æ–ª—å–∑–æ–π üíö\n–ù–∞—á–Ω—ë–º —Å –ø–æ–¥–±–æ—Ä–∞ –±–ª—é–¥–∞?"

    @bot.message_handler(commands=['start',])
    def send_welcome(message: types.Message):
        chat_id = message.from_user.id
        add_new_user(message)
        bot.send_message(chat_id, welcome_message)

    keyboard = types.InlineKeyboardMarkup()

    start_button = types.InlineKeyboardButton("start_search", callback_data="start")
    settings_buttons = [
        types.InlineKeyboardButton("–§–∏–ª—å—Ç—Ä—ã", callback_data="filters"),
        types.InlineKeyboardButton("–ë—é–¥–∂–µ—Ç", callback_data="budget"),
    ]
    keyboard.add(start_button)
    keyboard.add(*settings_buttons)

    @bot.message_handler(commands=['menu'])
    def send_menu(message: types.Message):
        chat_id = message.chat.id
        bot.send_message(chat_id, "–ú–µ–Ω—é:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: True)
    def callback_query(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        if call.data == "budget":
            check_budget(call.message)
        if call.data == "start":
            bot.send_message(chat_id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        if call.data == "filters":
            bot.send_message(chat_id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    @bot.message_handler(commands=['set_budget'])
    def set_budget(message: types.Message):
        user_message = message.text
        chat_id = message.chat.id
        try:
            budget = int(user_message.replace("/set_budget", ""))
        except ValueError:
            bot.send_message(chat_id, "–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!")
            return
        if budget < 0:
            bot.send_message(chat_id, "–ë—é–¥–∂–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!")
            return
        set_user_price(chat_id, budget)
        bot.send_message(chat_id, f"–í–∞—à –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç: {budget} —Ä—É–±–ª–µ–π.")

    @bot.message_handler(commands=['budget'])
    def check_budget(message: types.Message):
        chat_id = message.chat.id
        budget = get_budget(message)
        const_part = "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ /set_budget (–≤–∞—à –±—é–¥–∂–µ—Ç)."
        if budget == 2147483647:
            bot.send_message(chat_id, f"–í–∞—à –±—é–¥–∂–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. {const_part}")
            return
        bot.send_message(chat_id, f"–í–∞—à –±—é–¥–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {budget} —Ä—É–±–ª–µ–π. {const_part}")

    error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu."

    @bot.message_handler()
    def handle_text_message(message: types.Message):
        if not message.text.startswith('/'):
            bot.send_message(message.chat.id, error_message)

    bot.infinity_polling()
