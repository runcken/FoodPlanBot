import random
import dotenv
import os
import telebot
from telebot import types

from datacenter.models import Dish, User, DishProduct


def add_new_user(message):
    chat_id = message.from_user.id
    if not User.objects.filter(chat_id=chat_id).exists():
        username = str(message.from_user.username)
        new_user = User(chat_id=chat_id, user_name=username)
        new_user.save()


def set_user_price(chat_id, price):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        user = User.objects.get(chat_id=str(chat_id))
        user.price = price
        user.save()
        return True
    except User.DoesNotExist:
        return False


def get_budget(message):
    chat_id = message.chat.id
    user = User.objects.get(chat_id=chat_id)
    return user.price


def toggle_user_preference(chat_id, preference_type):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (str)
        preference_type: —Ç–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ('gluten_free', 'vegan', 'eco')
    Returns:
        new_value: –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (True/False) –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
    user = User.objects.get(chat_id=str(chat_id))

    # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
    current_value = getattr(user, preference_type)
    new_value = not current_value
    setattr(user, preference_type, new_value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user.save()

    return new_value


def get_dish(chat_id):
    user = User.objects.get(chat_id=chat_id)
    filtered_dishes = Dish.objects.filter(
        gluten_free=user.gluten_free,
        vegan=user.vegan,
        eco=user.eco,
        price__lte=user.price,
    )
    if filtered_dishes.exists():
        return random.choice(filtered_dishes)
    else:
        raise Exception("No dishes found matching the criteria")


def format_dish_main(dish):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ"""
    message = f"üçΩ *{dish.title}*\n\n"
    
    if dish.description:
        message += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {dish.description}\n\n"
    
    message += "‚ö° *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
    message += f"   ‚Ä¢ –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞: {'‚úÖ' if dish.gluten_free else '‚ùå'}\n"
    message += f"   ‚Ä¢ –í–µ–≥–∞–Ω—Å–∫–æ–µ: {'‚úÖ' if dish.vegan else '‚ùå'}\n"
    message += f"   ‚Ä¢ –≠–ö–û: {'‚úÖ' if dish.eco else '‚ùå'}\n\n"
    
    message += f"üí∞ *–¶–µ–Ω–∞:* {dish.price} —Ä—É–±."

    return message


def get_dish_products(dish):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –±–ª—é–¥–∞"""
    dish_products = DishProduct.objects.filter(dish=dish)
    products_text = "üõí *–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–ª—é–¥–∞:*\n\n"
    
    for dp in dish_products:
        products_text += f"‚Ä¢ {dp.product.name} - {dp.quantity}–≥"
        if dp.note:
            products_text += f" ({dp.note})"
        products_text += "\n"
    
    return products_text


def get_dish_keyboard(dish_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–ª—é–¥–æ–º"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    next_button = types.InlineKeyboardButton("üé≤ –°–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ", callback_data="next_dish")
    products_button = types.InlineKeyboardButton("üõí –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data=f"products_{dish_id}")
    recipe_button = types.InlineKeyboardButton("üìñ –†–µ—Ü–µ–ø—Ç", callback_data=f"recipe_{dish_id}")
    menu_button = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    keyboard.add(next_button)
    keyboard.add(products_button, recipe_button)
    keyboard.add(menu_button)
    
    return keyboard


def get_back_to_dish_keyboard(dish_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –±–ª—é–¥—É"""
    keyboard = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –±–ª—é–¥—É", callback_data=f"back_to_dish_{dish_id}")
    keyboard.add(back_button)
    return keyboard


def get_main_menu_keyboard(chat_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –±—é–¥–∂–µ—Ç–µ"""
    user = User.objects.get(chat_id=str(chat_id))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_budget = user.price
    budget_text = "–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" if current_budget == 2147483647 else f"{current_budget}‚ÇΩ"
    
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–ª—é–¥–∞
    random_dish_button = types.InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ", callback_data="show_random_dish")
    
    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    budget_button = types.InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data="set_budget")
    filters_button = types.InlineKeyboardButton("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã", callback_data="filters")
    
    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(random_dish_button)
    keyboard.add(budget_button)
    keyboard.add(filters_button)
    
    return keyboard, budget_text


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–∂–∏–¥–∞—é—Ç –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞)
user_states = {}


def run():
    dotenv.load_dotenv()
    token = os.getenv("TG_BOT")

    bot = telebot.TeleBot(token)
    welcome_message = "üçΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodPlan!\n–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è ‚Äî –≤–∫—É—Å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∏ —Å –ø–æ–ª—å–∑–æ–π üíö\n–ù–∞—á–Ω—ë–º —Å –ø–æ–¥–±–æ—Ä–∞ –±–ª—é–¥–∞?"

    start_menu_keyboard = types.InlineKeyboardMarkup()
    menu_button = types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main_menu")
    start_menu_keyboard.add(menu_button)

    @bot.callback_query_handler(func=lambda call: call.data == "show_random_dish")
    def show_random_dish_handler(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        try:
            dish = get_dish(chat_id)
            dish_message = format_dish_main(dish)
            keyboard = get_dish_keyboard(dish.id)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            if dish.image:
                try:
                    bot.send_photo(
                        chat_id, 
                        dish.image, 
                        caption=dish_message, 
                        parse_mode='Markdown',
                        reply_markup=keyboard
                    )
                except Exception as photo_error:
                    print(f"Photo send error: {photo_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    bot.send_message(
                        chat_id, 
                        dish_message, 
                        parse_mode='Markdown',
                        reply_markup=keyboard
                    )
            else:
                bot.send_message(
                    chat_id, 
                    dish_message, 
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
                
        except Exception as e:
            print(f"Error: {e}")
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            user = User.objects.get(chat_id=str(chat_id))
            budget_text = "–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" if user.price == 2147483647 else f"{user.price}‚ÇΩ"
            
            error_message = f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –±–ª—é–¥–æ.\n\n"
            error_message += f"*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
            error_message += f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {budget_text}\n"
            error_message += f"‚Ä¢ –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞: {'‚úÖ' if user.gluten_free else '‚ùå'}\n"
            error_message += f"‚Ä¢ –í–µ–≥–∞–Ω—Å–∫–æ–µ: {'‚úÖ' if user.vegan else '‚ùå'}\n"
            error_message += f"‚Ä¢ –≠–ö–û: {'‚úÖ' if user.eco else '‚ùå'}\n\n"
            error_message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –±—é–¥–∂–µ—Ç."
            
            keyboard, _ = get_main_menu_keyboard(chat_id)
            bot.send_message(
                chat_id, 
                error_message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )

    @bot.callback_query_handler(func=lambda call: call.data == "next_dish")
    def next_dish_handler(call: types.CallbackQuery):
        # –í—ã–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–ª—é–¥–∞
        show_random_dish_handler(call)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("products_"))
    def show_products_handler(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        dish_id = call.data.split("_")[1]
        
        try:
            dish = Dish.objects.get(id=dish_id)
            products_message = get_dish_products(dish)
            keyboard = get_back_to_dish_keyboard(dish.id)
            
            bot.send_message(
                chat_id,
                products_message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Dish.DoesNotExist:
            bot.send_message(chat_id, "‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("recipe_"))
    def show_recipe_handler(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        dish_id = call.data.split("_")[1]
        
        try:
            dish = Dish.objects.get(id=dish_id)
            recipe_message = f"üìñ *–†–µ—Ü–µ–ø—Ç {dish.title}:*\n\n{dish.recipe}"
            keyboard = get_back_to_dish_keyboard(dish.id)
            
            bot.send_message(
                chat_id,
                recipe_message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Dish.DoesNotExist:
            bot.send_message(chat_id, "‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_dish_"))
    def back_to_dish_handler(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        dish_id = call.data.split("_")[3]  # back_to_dish_{id}
        
        try:
            dish = Dish.objects.get(id=dish_id)
            dish_message = format_dish_main(dish)
            keyboard = get_dish_keyboard(dish.id)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=dish_message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Dish.DoesNotExist:
            bot.send_message(chat_id, "‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            print(f"Error editing message: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            bot.send_message(
                chat_id,
                dish_message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )

    @bot.callback_query_handler(func=lambda call: call.data == "set_budget")
    def set_budget_handler(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞
        user_states[chat_id] = "waiting_for_budget"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        keyboard = types.InlineKeyboardMarkup()
        cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_budget")
        keyboard.add(cancel_button)
        
        bot.send_message(
            chat_id,
            "üí∞ *–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—é–¥–∂–µ—Ç*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –±–ª—é–¥–æ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 500, 1000, 1500",
            parse_mode='Markdown',
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_budget")
    def cancel_budget_handler(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id in user_states:
            del user_states[chat_id]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard, budget_text = get_main_menu_keyboard(chat_id)
        menu_text = f"üçΩ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\nüí∞ –¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç: {budget_text}"

        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=menu_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"Error editing message: {e}")
            bot.send_message(
                chat_id,
                menu_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )

    @bot.message_handler(func=lambda message: message.chat.id in user_states and user_states[message.chat.id] == "waiting_for_budget")
    def handle_budget_input(message):
        chat_id = message.chat.id
        user_input = message.text.strip()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_states[chat_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥
        try:
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            budget = int(''.join(filter(str.isdigit, user_input)))
            
            if budget <= 0:
                bot.send_message(chat_id, "‚ùå –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—é–¥–∂–µ—Ç
            set_user_price(chat_id, budget)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard, budget_text = get_main_menu_keyboard(chat_id)
            menu_text = f"üçΩ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n‚úÖ –ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {budget}‚ÇΩ"
            bot.send_message(chat_id, menu_text, parse_mode='Markdown', reply_markup=keyboard)
            
        except ValueError:
            bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä: 500, 1000, 1500")

    @bot.message_handler(commands=['start'])
    def send_welcome(message: types.Message):
        chat_id = message.from_user.id
        add_new_user(message)
        bot.send_message(chat_id, welcome_message, reply_markup=start_menu_keyboard)

    @bot.callback_query_handler(func=lambda call: call.data == "main_menu")
    def main_menu_handler(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        keyboard, budget_text = get_main_menu_keyboard(chat_id)
        menu_text = f"üçΩ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\nüí∞ –¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç: {budget_text}"
        
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=menu_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        except:
            bot.send_message(
                chat_id,
                menu_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )

    @bot.message_handler(commands=['menu'])
    def send_menu(message: types.Message):
        chat_id = message.chat.id
        keyboard, budget_text = get_main_menu_keyboard(chat_id)
        menu_text = f"üçΩ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\nüí∞ –¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç: {budget_text}"
        bot.send_message(chat_id, menu_text, parse_mode='Markdown', reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: True)
    def callback_query(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        if call.data == "budget":
            check_budget(call.message)
        elif call.data == "filters":
            bot.send_message(chat_id, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–∫–æ—Ä–æ!")

    @bot.message_handler(commands=['set_budget'])
    def set_budget_command(message: types.Message):
        chat_id = message.chat.id
        user_input = message.text.replace("/set_budget", "").strip()
        
        if not user_input:
            # –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
            set_budget_handler(type('Callback', (), {'message': type('Message', (), {'chat': type('Chat', (), {'id': chat_id})})})())
        return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥
        try:
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            budget = int(''.join(filter(str.isdigit, user_input)))
            
            if budget <= 0:
                bot.send_message(chat_id, "‚ùå –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—é–¥–∂–µ—Ç
            set_user_price(chat_id, budget)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard, budget_text = get_main_menu_keyboard(chat_id)
            menu_text = f"üçΩ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n‚úÖ –ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {budget}‚ÇΩ"
            bot.send_message(chat_id, menu_text, parse_mode='Markdown', reply_markup=keyboard)
            
        except ValueError:
            bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_budget 500")

    @bot.message_handler(commands=['budget'])
    def check_budget(message: types.Message):
        chat_id = message.chat.id
        budget = get_budget(message)
        const_part = "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ /set_budget –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç' –≤ –º–µ–Ω—é."
        if budget == 2147483647:
            bot.send_message(chat_id, f"‚úÖ –í–∞—à –±—é–¥–∂–µ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. {const_part}", parse_mode='HTML')
            return
        bot.send_message(chat_id, f"üí∞ –í–∞—à –±—é–¥–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {budget} —Ä—É–±–ª–µ–π. {const_part}", parse_mode='HTML')

    error_message = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu."

    @bot.message_handler()
    def handle_text_message(message: types.Message):
        if not message.text.startswith('/'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞
            if message.chat.id in user_states and user_states[message.chat.id] == "waiting_for_budget":
                handle_budget_input(message)
            else:
                bot.send_message(message.chat.id, error_message, reply_markup=start_menu_keyboard)

    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.infinity_polling()
