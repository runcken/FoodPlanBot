from datacenter.models import Dish, User
from tg_bot.utils import user_utils, dish_utils, formatters
from tg_bot.keyboards import main_menu, dish_keyboards, filters_keyboard


def setup_callback_handlers(bot, user_states):
    @bot.callback_query_handler(func=lambda call: call.data == "show_random_dish")
    def show_random_dish_handler(call):
        chat_id = call.message.chat.id
        try:
            dish = dish_utils.get_dish(chat_id)
            dish_message = formatters.format_dish_main(dish)
            keyboard = dish_keyboards.get_dish_keyboard(dish.id)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            if dish.image:
                try:
                    bot.send_photo(
                        chat_id, 
                        dish.image, 
                        caption=dish_message, 
                        parse_mode='Markdown',
                        reply_markup=keyboard
                    )
                except Exception as photo_error:
                    print(f"Photo send error: {photo_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    bot.send_message(
                        chat_id, 
                        dish_message, 
                        parse_mode='Markdown',
                        reply_markup=keyboard
                    )
            else:
                bot.send_message(
                    chat_id, 
                    dish_message, 
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
                
        except Exception as e:
            print(f"Error: {e}")
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            user = User.objects.get(chat_id=str(chat_id))
            budget_text = formatters.format_budget_text(user.price)
            
            error_message = f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –±–ª—é–¥–æ.\n\n"
            error_message += f"*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
            error_message += f"‚Ä¢ –ë—é–¥–∂–µ—Ç: {budget_text}\n"
            error_message += f"‚Ä¢ –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞: {'‚úÖ' if user.gluten_free else '‚ùå'}\n"
            error_message += f"‚Ä¢ –í–µ–≥–∞–Ω—Å–∫–æ–µ: {'‚úÖ' if user.vegan else '‚ùå'}\n"
            error_message += f"‚Ä¢ –≠–ö–û: {'‚úÖ' if user.eco else '‚ùå'}\n\n"
            error_message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –±—é–¥–∂–µ—Ç."
            
            keyboard, _ = main_menu.get_main_menu_keyboard(user)
            bot.send_message(
                chat_id, 
                error_message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )


    @bot.callback_query_handler(func=lambda call: call.data == "next_dish")
    def next_dish_handler(call):
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–ª—é–¥–∞
        show_random_dish_handler(call)


    @bot.callback_query_handler(func=lambda call: call.data.startswith("products_"))
    def show_products_handler(call):
        chat_id = call.message.chat.id
        dish_id = call.data.split("_")[1]
        
        try:
            dish = Dish.objects.get(id=dish_id)
            products_message = dish_utils.get_dish_products(dish)
            keyboard = dish_keyboards.get_back_to_dish_keyboard(dish.id)
            
            bot.send_message(
                chat_id,
                products_message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Dish.DoesNotExist:
            bot.send_message(chat_id, "‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


    @bot.callback_query_handler(func=lambda call: call.data.startswith("recipe_"))
    def show_recipe_handler(call):
        chat_id = call.message.chat.id
        dish_id = call.data.split("_")[1]
        
        try:
            dish = Dish.objects.get(id=dish_id)
            recipe_message = f"üìñ *–†–µ—Ü–µ–ø—Ç {dish.title}:*\n\n{dish.recipe}"
            keyboard = dish_keyboards.get_back_to_dish_keyboard(dish.id)
            
            bot.send_message(
                chat_id,
                recipe_message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Dish.DoesNotExist:
            bot.send_message(chat_id, "‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


    @bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_dish_"))
    def back_to_dish_handler(call):
        chat_id = call.message.chat.id
        dish_id = call.data.split("_")[3]
        
        try:
            dish = Dish.objects.get(id=dish_id)
            dish_message = formatters.format_dish_main(dish)
            keyboard = dish_keyboards.get_dish_keyboard(dish.id)
            
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=dish_message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
        except Dish.DoesNotExist:
            bot.send_message(chat_id, "‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            print(f"Error editing message: {e}")
            bot.send_message(
                chat_id,
                dish_message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )


    @bot.callback_query_handler(func=lambda call: call.data == "set_budget")
    def set_budget_handler(call, user_states=user_states):
        chat_id = call.message.chat.id
        user_states[chat_id] = "waiting_for_budget"
        
        keyboard = dish_keyboards.get_budget_input_keyboard()
        
        bot.send_message(
            chat_id,
            "üí∞ *–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—é–¥–∂–µ—Ç*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –±–ª—é–¥–æ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 500, 1000, 1500",
            parse_mode='Markdown',
            reply_markup=keyboard
        )


    @bot.callback_query_handler(func=lambda call: call.data == "cancel_budget")
    def cancel_budget_handler(call):
        chat_id = call.message.chat.id
        
        if chat_id in user_states:
            del user_states[chat_id]
        
        user = User.objects.get(chat_id=str(chat_id))
        keyboard, budget_text = main_menu.get_main_menu_keyboard(user)
        menu_text = f"üçΩ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\nüí∞ –¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç: {budget_text}"
        
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=menu_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"Error editing message: {e}")
            bot.send_message(
                chat_id,
                menu_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )


    @bot.callback_query_handler(func=lambda call: call.data == "filters_menu")
    def filters_menu_handler(call):
        chat_id = call.message.chat.id
        user = User.objects.get(chat_id=str(chat_id))
        
        filters_status = formatters.format_filters_status(user)
        keyboard = filters_keyboard.get_filters_menu_keyboard(user)
        
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=filters_status,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"Error editing message: {e}")
            bot.send_message(
                chat_id,
                filters_status,
                parse_mode='Markdown',
                reply_markup=keyboard
            )


    @bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_"))
    def toggle_filter_handler(call):
        chat_id = call.message.chat.id
        filter_type = call.data.split("_")[1]
        
        field_map = {
            "gluten": "gluten_free",
            "vegan": "vegan",
            "eco": "eco"
        }
        
        if filter_type in field_map:
            field_name = field_map[filter_type]
            new_value = user_utils.toggle_user_preference(chat_id, field_name)
            
            user = User.objects.get(chat_id=str(chat_id))
            filters_status = formatters.format_filters_status(user)
            keyboard = filters_keyboard.get_filters_menu_keyboard(user)
            
            filter_names = {
                "gluten": "–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞",
                "vegan": "–í–µ–≥–∞–Ω—Å–∫–æ–µ", 
                "eco": "–≠–ö–û"
            }
            
            status_text = "‚úÖ –í–ö–õ" if new_value else "‚ùå –í–´–ö–õ"
            action_message = f"–§–∏–ª—å—Ç—Ä '{filter_names[filter_type]}' —Ç–µ–ø–µ—Ä—å {status_text}"
            
            try:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    text=f"{filters_status}\n\n{action_message}",
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
            except Exception as e:
                print(f"Error editing message: {e}")
                bot.send_message(
                    chat_id,
                    f"{filters_status}\n\n{action_message}",
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )


    @bot.callback_query_handler(func=lambda call: call.data == "reset_filters")
    def reset_filters_handler(call):
        chat_id = call.message.chat.id
        
        user = User.objects.get(chat_id=str(chat_id))
        user.gluten_free = False
        user.vegan = False
        user.eco = False
        user.save()
        
        filters_status = formatters.format_filters_status(user)
        keyboard = filters_keyboard.get_filters_menu_keyboard(user)
        
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=f"{filters_status}\n\n‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã!",
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"Error editing message: {e}")
            bot.send_message(
                chat_id,
                f"{filters_status}\n\n‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã!",
                parse_mode='Markdown',
                reply_markup=keyboard
            )


    @bot.callback_query_handler(func=lambda call: call.data == "main_menu")
    def main_menu_handler(call):
        chat_id = call.message.chat.id
        user = User.objects.get(chat_id=str(chat_id))
        keyboard, budget_text = main_menu.get_main_menu_keyboard(user)
        menu_text = f"üçΩ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\nüí∞ –¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç: {budget_text}"
        
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=menu_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        except:
            bot.send_message(
                chat_id,
                menu_text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
